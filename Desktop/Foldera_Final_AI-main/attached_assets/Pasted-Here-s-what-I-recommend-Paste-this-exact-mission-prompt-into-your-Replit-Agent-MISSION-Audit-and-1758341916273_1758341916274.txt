Here’s what I recommend: Paste this exact mission prompt into your Replit Agent:

MISSION: Audit and fix the entire Foldera.ai repo with hard pass/fail gates, then produce a proof-of-work audit report.

NON-NEGOTIABLE OUTPUTS
1) A single PR on main with atomic commits titled: "Fix: Upload + Dashboard + Viewer + Links + Stripe + 2025 + Polish".
2) File: audit/audit-report.md containing: test matrix, logs, screenshots paths, version info, commit SHAs, and a green summary table for all checks.
3) Scriptable test runner: `npm run e2e` that executes all checks headlessly and exits non-zero on any failure.

ENV EXPECTED (create .env.local if missing; never hardcode secrets)
- STRIPE_SECRET_KEY, NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
- TIER99_PRICE_ID, TIER199_PRICE_ID, TIER299_PRICE_ID  (if absent, auto-create in test mode and write them to .env.local)
- NEXT_PUBLIC_CALENDLY_URL  (default https://calendly.com/your-calendly/30min)
- WAITLIST_FORM_ACTION       (default https://example.com/waitlist)
- SUPABASE_URL, SUPABASE_ANON_KEY  (if the app already uses Supabase—reuse existing)

CONSTRAINTS
- Keep framework and file structure. No library or runtime swaps. Node 20.x baseline.
- Prefer minimal, surgical patches over refactors. No design detours beyond what is specified.
- If a step fails twice, stop and record failure with logs in audit/audit-report.md.

CRITICAL FIXES
A) Upload pipeline
- Accept PDF/DOCX/TXT reliably. Treat unknown Content-Type as application/octet-stream and infer by extension + magic bytes.
- PDF: use pdf-parse (or pdf-parse/lib/pdf.js) with fallback to text extraction via simple OCR stub or plain-text decode.
- DOCX: use mammoth. On failure, unzip and extract /word/document.xml text minimally.
- TXT: decode as UTF-8. Strip binary.
- Persist: store original filename, byte size, mime, extractedText, created_at. Ensure filename and size survive through API and DB.
- Add deterministic fallback: if no discrepancies found, insert one synthetic discrepancy so demo never returns empty.

B) Dashboard metadata
- Replace any "Unknown file 0 Bytes" with real filename and size. Verify list and count `{discrepancies.length}` render correctly.
- Add zero-state message with CTA to upload.

C) Document viewer
- Make each "View" button open `/document/[id]` and render extractedText in a readable monospace panel with copy-to-clipboard.

D) Copyright
- Search-replace all year strings that indicate 2024 to "© 2025 Foldera" in footer and anywhere user-facing (ignore changelogs).

E) Links
- "Book a demo" → NEXT_PUBLIC_CALENDLY_URL.
- Pricing page buttons → Stripe Checkout (below).
- Waitlist form → WAITLIST_FORM_ACTION; validate HTTP 200 on submit in tests.

F) Stripe checkout (test mode)
- Choose ONE flow: Checkout Session URL.
- `/api/checkout?tier=99|199|299` maps to env PRICE IDs. If missing, create Products "Foldera $99/$199/$299" with recurring monthly prices via Stripe API and print IDs + append to .env.local.
- Success `/success` and cancel `/cancel` pages working.
- Log session.id for audit.

POLISH (strictly scoped)
- Remove all emojis with a regex pass across content and components.
- Replace placeholder text with concise enterprise copy: value, outcomes, proof points. No marketing fluff.
- Dark, minimal theme: Tailwind prefers `class="dark"` at html root. Use limited neutrals. No animation or heavy redesign.
- Dashboard: add a tiny real-time count badge and a simple sparkline of total discrepancies over last N uploads using lightweight inline SVG only.

TEST HARNESS (create if missing)
- Use Playwright for E2E. Add `npm run e2e:install` to install browsers.
- Fixtures: add 5 small valid PDFs, 1 DOCX, 1 TXT under tests/fixtures/.
- Tests:
  1) upload.spec.ts: upload the 7 files; assert success toasts; verify DB/storage entries; verify synthetic discrepancy fallback.
  2) dashboard.spec.ts: assert visible filenames and human-readable sizes; count equals uploaded items; zero console errors.
  3) viewer.spec.ts: click "View" for each item; assert extractedText is non-empty.
  4) links.spec.ts: click "Book a demo" → opens NEXT_PUBLIC_CALENDLY_URL; waitlist form POST returns 200.
  5) stripe.spec.ts: trigger each tier; assert 303 redirect to Checkout URL; optionally create session via API call stub if headless redirect is blocked.
  6) footer.spec.ts: assert "© 2025 Foldera".
  7) nav.spec.ts: crawl header/footer nav; assert all routes 200.
  8) responsive.spec.ts: run at 390px, 768px, 1280px; assert no layout overflow or clipped buttons.
  9) console.spec.ts: fail test if console has error events during main flows.

PACKAGE SCRIPTS
- "test": "vitest"
- "e2e:install": "npx playwright install --with-deps"
- "e2e": "playwright test --reporter=list"
- "audit": "node scripts/make-audit-report.mjs"

AUDIT REPORT
- Write audit/audit-report.md with: date, git SHA, Node/Next versions, env keys present (redact values), test matrix table with ✅/❌, and any Stripe IDs created.
- Save Playwright traces and screenshots to audit/artifacts/ and link them from the report.

DELIVERY ORDER
1) Wire upload + extraction + metadata. 2) Fix dashboard names/sizes + count. 3) Implement viewer. 4) Repair links. 5) Stripe Checkout flow with auto-create prices if missing. 6) Year update. 7) Emoji purge + copy tighten + dark theme. 8) Add Playwright and tests. 9) Make audit-report.md. 10) Open PR and paste report summary into PR description.

STOP CONDITION
- Open the PR, attach audit/audit-report.md contents, and print "ALL CHECKS GREEN" with totals. If any test fails, print failing spec names and stop.

Audit: Your draft is broad but under-specified; this version adds hard env gates, deterministic tests, and a written audit report so the agent proves success instead of claiming it.

